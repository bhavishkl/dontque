-- Users Table (rewritten)
CREATE TABLE user_profile (
    user_id VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE,
    phone_number VARCHAR(20) UNIQUE,
    image VARCHAR(255),
    country_code VARCHAR(5),
    otpless_token VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    user_short_id INTEGER
);

CREATE INDEX idx_user_profile_email ON user_profile(email);
CREATE INDEX idx_user_profile_phone_number ON user_profile(phone_number);
CREATE INDEX idx_user_profile_short_id ON user_profile(short_id);

CREATE TABLE queue_entries_archive (
  id SERIAL PRIMARY KEY,
  queue_id UUID NOT NULL,
  user_id VARCHAR(255) PRIMARY KEY,
  status VARCHAR(20) NOT NULL,
  wait_time INTEGER,
  actual_wait_time INTEGER,
  join_time TIMESTAMP NOT NULL,
  serve_time TIMESTAMP,
  leave_time TIMESTAMP,
  rating INTEGER,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  left_position INTEGER,
  added_by VARCHAR(255),
  review_status VARCHAR(20) DEFAULT 'pending' CHECK (review_status IN ('pending', 'completed', 'skipped')
);

CREATE INDEX idx_queue_entries_archive_review ON queue_entries_archive(user_id, review_status);

-- Queues Table (rewritten)
CREATE TABLE queues (
    queue_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    owner_id VARCHAR(255) REFERENCES user_profile(user_id),
    short_id INTEGER,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(50),
    location VARCHAR(255),
    max_capacity INTEGER,
    current_queue INTEGER DEFAULT 0,
    estimated_wait_time INTEGER,
    est_time_to_serve INTEGER,
    avg_wait_time INTEGER,
    total_served INTEGER DEFAULT 0,
    status VARCHAR(20) DEFAULT 'active',
    opening_time TIME,
    closing_time TIME,
    image_url VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    service_start_time TIME,
    next_serve_at TIMESTAMP WITH TIME ZONE,
    avg_rating DECIMAL(3,1) GENERATED ALWAYS AS (
        (SELECT avg_rating FROM queue_rating_stats WHERE queue_id = queues.queue_id)
    ) STORED
);

CREATE INDEX idx_queues_owner_id ON queues(owner_id);
CREATE INDEX idx_queues_category ON queues(category);
CREATE INDEX idx_queues_status ON queues(status);

-- Queue Entries Table (rewritten)
CREATE TABLE queue_entries (
    entry_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    queue_id UUID REFERENCES queues(queue_id),
    user_id VARCHAR(255) REFERENCES user_profile(user_id),
    position INTEGER,
    estimated_wait_time INTEGER,
    join_time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'waiting',
    served_time TIMESTAMP WITH TIME ZONE,
    expected_at TIMESTAMP WITH TIME ZONE
    added_by VARCHAR(255)

);

CREATE INDEX idx_queue_entries_queue_id ON queue_entries(queue_id);
CREATE INDEX idx_queue_entries_user_id ON queue_entries(user_id);
CREATE INDEX idx_queue_entries_status ON queue_entries(status);
CREATE INDEX idx_queue_entries_sort_time ON queue_entries(sort_time);

-- Enhanced User Ratings & Reviews Table
CREATE TABLE user_ratings (
    rating_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id VARCHAR(255) REFERENCES user_profile(user_id),
    queue_id UUID REFERENCES queues(queue_id),
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    review_title VARCHAR(100),
    review_text TEXT,
    visit_date DATE,
    wait_time_rating INTEGER CHECK (wait_time_rating >= 1 AND wait_time_rating <= 5),
    service_rating INTEGER CHECK (service_rating >= 1 AND service_rating <= 5),
    ambiance_rating INTEGER CHECK (ambiance_rating >= 1 AND ambiance_rating <= 5),
    helpful_votes INTEGER DEFAULT 0,
    status VARCHAR(20) DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, queue_id, visit_date)
);

CREATE INDEX idx_user_ratings_queue_id ON user_ratings(queue_id);
CREATE INDEX idx_user_ratings_user_id ON user_ratings(user_id);
CREATE INDEX idx_user_ratings_created_at ON user_ratings(created_at);

CREATE TABLE review_reactions (
    reaction_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    rating_id UUID REFERENCES user_ratings(rating_id),
    user_id VARCHAR(255) REFERENCES user_profile(user_id),
    reaction_type VARCHAR(20) CHECK (reaction_type IN ('helpful', 'not_helpful')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(rating_id, user_id)
);

CREATE INDEX idx_review_reactions_rating_id ON review_reactions(rating_id);
CREATE INDEX idx_review_reactions_user_id ON review_reactions(user_id);

CREATE VIEW queue_rating_stats AS
SELECT 
    q.queue_id,
    COUNT(r.rating_id) as total_reviews,
    ROUND(AVG(r.rating)::numeric, 1) as avg_rating,
    ROUND(AVG(r.wait_time_rating)::numeric, 1) as avg_wait_time_rating,
    ROUND(AVG(r.service_rating)::numeric, 1) as avg_service_rating,
    ROUND(AVG(r.ambiance_rating)::numeric, 1) as avg_ambiance_rating,
    COUNT(CASE WHEN r.rating = 5 THEN 1 END) as five_star_count,
    COUNT(CASE WHEN r.rating = 4 THEN 1 END) as four_star_count,
    COUNT(CASE WHEN r.rating = 3 THEN 1 END) as three_star_count,
    COUNT(CASE WHEN r.rating = 2 THEN 1 END) as two_star_count,
    COUNT(CASE WHEN r.rating = 1 THEN 1 END) as one_star_count
FROM 
    queues q
LEFT JOIN 
    user_ratings r ON q.queue_id = r.queue_id
WHERE 
    r.status = 'active'
GROUP BY 
    q.queue_id;

CREATE TABLE user_notification_preferences (
    user_id VARCHAR(255) PRIMARY KEY REFERENCES user_profile(user_id),
    email_enabled BOOLEAN DEFAULT true,
    sms_enabled BOOLEAN DEFAULT true,
    whatsapp_enabled BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Business Analytics View
CREATE VIEW business_analytics_view AS
SELECT 
    q.queue_id,
    q.name,
    DATE(qea.join_time) as date,
    EXTRACT(HOUR FROM qea.join_time) as hour,
    COUNT(DISTINCT CASE WHEN qea.status = 'served' THEN qea.user_id END) as customers_served,
    COUNT(DISTINCT CASE WHEN qea.status = 'left' THEN qea.user_id END) as customers_left,
    AVG(qea.actual_wait_time) as avg_wait_time,
    MAX(qea.actual_wait_time) as peak_wait_time,
    COUNT(DISTINCT qea.user_id) as total_customers,
    qrs.avg_rating as satisfaction_score
FROM 
    queues q
LEFT JOIN 
    queue_entries_archive qea ON q.queue_id = qea.queue_id
LEFT JOIN 
    queue_rating_stats qrs ON q.queue_id = qrs.queue_id
GROUP BY 
    q.queue_id, q.name, DATE(qea.join_time), EXTRACT(HOUR FROM qea.join_time), qrs.avg_rating;